#vc0 projection
#vc1 world transform for x
#vc2 world transform for y
#vc3 textureWidth, textureHeight, 0.5, 0

#vt0 position
#vt1 tw*scale,th*scale,sin(rotation),cos(rotation)
#vt2 w*cos,-h*sin,w*sin,h*cos
#vt3 x, y, scale, rotation
#v0 uv
#v1 color

@particle2d

vt3.x = va0.z + va0.z
v1  = vc[vt3.x+5]
vt3 = vc[vt3.x+4]

vt0.xyw = va0 - vc3.zzww	#pivot
vt0.z = vc3.w

vt1.xy = vc3.xy * vt3.z
vt1.z = sin: vt3.w
vt1.w = cos: vt3.w

vt2.zw = vt1.xxxy * vt1.zzzw
vt1.z = neg: vt1.z
vt2.xy = vt1.xy * vt1.wz

vt1 = vt2 * vt0.xyxy		#rotation
vt0.xy = vt1.xz + vt1.yw

vt0.xy += vt3				#translation

${mvp2d.vs}

v0 = va0

ft0 = tex: v0, fs0<2d,linear,clamp>
oc = ft0 * v1