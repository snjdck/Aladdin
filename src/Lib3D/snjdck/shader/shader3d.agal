#vc0-1		PROJECTION_MATRIX
#vc2-4		CAMERA_MATRIX
#vc5-7		WORLD_MATRIX
#vc8-127	BONE_MATRIX

#计算前必须设置vt1为四元数,结果放在vt1
@quaternion.vs
vt2.xyz = vt1 * vt1.yzx			#xy,yz,zx
vt3.xyz = vt1 * vt1.www			#xw,yw,zw
vt1 *= vt1						#xx,yy,zz,ww

vt4.xyz = vt2.zxy + vt3.yzx		#(zx+yw),(xy+zw),(yz+xw)
vt3.xyz = vt2.xyz - vt3.zxy		#(xy-zw),(yz-xw),(zx-yw)

vt2.xyz  = vt1 + vt1.w			#(xx+ww),(yy+ww),(zz+ww)
vt2.xyz -= vt1.yzx				#(xx+ww-yy),(yy+ww-zz),(zz+ww-xx)
vt2.xyz -= vt1.zxy				#(xx+ww-yy-zz),(yy+ww-zz-xx),(zz+ww-xx-yy)

vt2.xyz *= ${0}.xyz
vt3.xyz *= ${0}.yzx
vt4.xyz *= ${0}.zxy

vt1.xyz = vt3.xyz + vt4.xyz
vt1.xyz += vt1.xyz					#乘以2
vt1.xyz += vt2.xyz

@bone.vs<va0,${0}>
vt1 = vc[${1}]
${quaternion.vs}
vt1.xyz = add: vt1, vc[${1}+1]		#偏移

@bone1.vs<va2.x>
${bone.vs}
vt0.xyz = vt1 * va2.y				#骨骼权重

@bone2.vs<va2.z>
${bone.vs}
vt1.xyz *= va2.w					#骨骼权重
vt0.xyz += vt1

@bone3.vs<va3.x>
${bone.vs}
vt1.xyz *= va3.y					#骨骼权重
vt0.xyz += vt1

@bone4.vs<va3.z>
${bone.vs}
vt1.xyz *= va3.w					#骨骼权重
vt0.xyz += vt1

@bone_ani_pos.vs
${bone1.vs}
${bone2.vs}
${bone3.vs}
${bone4.vs}
vt0.w = va0

#===============================================================

@camera3d.vs<vt0>
#世界 -> 相机
vt0.xyz -= vc2
vt1 = vc1
${quaternion.vs}
#投影
vt1.z += vc0.w
vt0.xyz = vt1 * vc0
op = vt0

@objectImp.vs
#本地 -> 世界
vt0.xyz = m34: vt0, vc5
${camera3d.vs}

@objectImp.agal
${objectImp.vs}
v0 = va1				#uv
ft0 = tex: v0, fs0<clamp,${0}>
ft1.x = ft0.w - fc27.x
kil:ft1.x
oc = ft0
#===============================================================

@bone_ani<rgba>
${bone_ani_pos.vs}
${objectImp.agal}

@bone_ani_dxt5<dxt5>
${bone_ani_pos.vs}
${objectImp.agal}

@object<rgba>
vt0 = va0
${objectImp.agal}

@object_dxt5<dxt5>
vt0 = va0
${objectImp.agal}

@billboard
vt0 = va0 + vc8.zzww	#将图片中心点从左上角改到正中
vt0.xy = vt0 * vc8		#图片宽高
${objectImp.vs}
v0 = va0 * vc9			#调整uv
oc = tex: v0, fs0<repeat>

